gen_samp <- function() {
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[0:5],500000, replace=TRUE, prob = c(0.059, 0.601, 0.185, 0.134, 0.028)))
gen_pop$shot <- sample(c(0, 1), 5000, replace=TRUE, prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- gen_pop %>% group_by(race) %>% count()
return (gen_pop$n)
}
mat <- matrix(rep(NA, 5000), ncol=5)
for (i in 1:1000) {
mat[i,] = gen_samp()
}
gen_samp <- function() {
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[0:5],500000, replace=TRUE, prob = c(0.059, 0.601, 0.185, 0.134, 0.028)))
gen_pop$shot <- sample(c(0, 1), 5000, replace=TRUE, prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- gen_pop %>% group_by(race) %>% tally()
return (gen_pop$n)
}
mat <- matrix(rep(NA, 5000), ncol=5)
for (i in 1:1000) {
mat[i,] = gen_samp()
}
mat <- data.frame(mat)
colnames(mat) <- c("A", "B", "H", "O", "W")
ggqqplot(mat$B)
hist(mat$B)
mat$total <- apply(mat, 1, sum)
gen_pop <- gen_pop %>% group_by(race) %>% tally()
View(gen_pop)
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[0:5],500000, replace=TRUE, prob = c(0.059, 0.601, 0.185, 0.134, 0.028)))
gen_pop$shot <- sample(c(0, 1), 5000, replace=TRUE, prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- gen_pop %>% group_by(race) %>% tally()
View(gen_pop)
gen_samp <- function() {
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[0:5],500000, replace=TRUE, prob = c(0.059, 0.601, 0.185, 0.134, 0.028)))
gen_pop$shot <- sample(c(0, 1), 5000, replace=TRUE, prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- gen_pop %>% group_by(race) %>% tally()
return (gen_pop$n)
}
mat <- matrix(rep(NA, 5000), ncol=5)
for (i in 1:1000) {
mat[i,] = gen_samp()
}
mat <- data.frame(mat)
colnames(mat) <- c("A", "B", "H", "O", "W")
ggqqplot(mat$B)
hist(mat$B)
mat$total <- apply(mat, 1, sum)
View(mat)
View(dat)
obs.val <- dat %>% group_by(race) %>% tally()
View(obs.val)
View(mat)
obs.val <- dat %>% group_by(race) %>% tally()
race <- 'B'
mean <- obs.val[obs.val$race == race,2]
t.test(mat$B / mat$total, mu=mean / sum(obs.val$n))
mat$B / mat$total
mean / sum(obs.val$n)
mean
obs.val[obs.val$race == race,2]
mean <- obs.val[obs.val$race == race,'n']
mean
mean <- as.integer(obs.val[obs.val$race == race,2])
mean
obs.val <- dat %>% group_by(race) %>% tally
race <- 'B'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$B / mat$total, mu=mean / sum(obs.val$n))
race <- 'W'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$W / mat$total, mu=mean / sum(obs.val$n))
race <- 'A'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$A / mat$total, mu=mean / sum(obs.val$n))
race <- 'H'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$H / mat$total, mu=mean / sum(obs.val$n))
set.seed(1234)
gen_samp <- function() {
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[0:5],500000, replace=TRUE, prob = c(0.059, 0.601, 0.185, 0.134, 0.028)))
gen_pop$shot <- sample(c(0, 1), 5000, replace=TRUE, prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- gen_pop %>% group_by(race) %>% tally()
return (gen_pop$n)
}
mat <- matrix(rep(NA, 5000), ncol=5)
for (i in 1:1000) {
mat[i,] = gen_samp()
}
mat <- data.frame(mat)
colnames(mat) <- c("A", "B", "H", "O", "W")
ggqqplot(mat$B)
hist(mat$B)
mat$total <- apply(mat, 1, sum)
race <- 'H'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$H / mat$total, mu=mean / sum(obs.val$n))
for (i in 1:1000) {
mat[i,] = gen_samp()
}
mat <- matrix(rep(NA, 5000), ncol=5)
for (i in 1:1000) {
mat[i,] = gen_samp()
}
mat <- data.frame(mat)
colnames(mat) <- c("A", "B", "H", "O", "W")
ggqqplot(mat$B)
hist(mat$B)
mat$total <- apply(mat, 1, sum)
race <- 'H'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$H / mat$total, mu=mean / sum(obs.val$n))
race <- 'N'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$N / mat$total, mu=mean / sum(obs.val$n))
unique(dat$race)
set.seed(1234)
gen_samp <- function() {
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[0:5],500000, replace=TRUE, prob = c(0.059, 0.601, 0.185, 0.134, 0.028)))
gen_pop$shot <- sample(c(0, 1), 500000, replace=TRUE, prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- gen_pop %>% group_by(race) %>% tally()
return (gen_pop$n)
}
mat <- matrix(rep(NA, 5000), ncol=5)
for (i in 1:1000) {
mat[i,] = gen_samp()
}
mat <- data.frame(mat)
colnames(mat) <- c("A", "B", "H", "O", "W")
ggqqplot(mat$B)
hist(mat$B)
mat$total <- apply(mat, 1, sum)
obs.val <- dat %>% group_by(race) %>% tally
race <- 'B'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$B / mat$total, mu=mean / sum(obs.val$n))
race <- 'W'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$W / mat$total, mu=mean / sum(obs.val$n))
race <- 'A'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$A / mat$total, mu=mean / sum(obs.val$n))
race <- 'A'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$A / mat$total, mu=mean / sum(obs.val$n))
race <- 'H'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$H / mat$total, mu=mean / sum(obs.val$n))
race <- 'H'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$H / mat$total, mu=mean / sum(obs.val$n))
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[0:5],500000, replace=TRUE, prob = c(0.059, 0.601, 0.185, 0.134, 0.028)))
gen_pop$shot <- sample(c(0, 1), 500000, replace=TRUE, prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[0:5],500000, replace=TRUE, prob = c(0.059, 0.601, 0.185, 0.134, 0.028)))
View(gen_pop)
gen_pop$shot <- sample(c(0, 1), 500000, replace=TRUE, prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- gen_pop %>% group_by(race) %>% tally()
unique(dat$race)
set.seed(1234)
gen_samp <- function() {
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[1:6],500000, replace=TRUE, prob = c(0.059, 0.601, 0.185, 0.134, 0.028, 0.013)))
gen_pop$shot <- sample(c(0, 1), 500000, replace=TRUE, prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- gen_pop %>% group_by(race) %>% tally()
return (gen_pop$n)
}
mat <- matrix(rep(NA, 5000), ncol=5)
for (i in 1:1000) {
mat[i,] = gen_samp()
}
set.seed(1234)
gen_samp <- function() {
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[1:6],500000, replace=TRUE, prob = c(0.059, 0.601, 0.185, 0.134, 0.028, 0.013)))
gen_pop$shot <- sample(c(0, 1), 500000, replace=TRUE, prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- gen_pop %>% group_by(race) %>% tally()
return (gen_pop$n)
}
mat <- matrix(rep(NA, 5000), ncol=6)
for (i in 1:1000) {
mat[i,] = gen_samp()
}
set.seed(1234)
gen_samp <- function() {
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[1:6],500000, replace=TRUE, prob = c(0.059, 0.601, 0.185, 0.134, 0.028, 0.013)))
gen_pop$shot <- sample(c(0, 1), 500000, replace=TRUE, prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- gen_pop %>% group_by(race) %>% tally()
return (gen_pop$n)
}
mat <- matrix(rep(NA, 5000), ncol=6)
for (i in 1:1000) {
mat[i,] = gen_samp()
}
set.seed(1234)
gen_samp <- function() {
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[1:6],500000, replace=TRUE, prob = c(0.059, 0.601, 0.185, 0.134, 0.028, 0.013)))
gen_pop$shot <- sample(c(0, 1), 500000, replace=TRUE, prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- gen_pop %>% group_by(race) %>% tally()
return (gen_pop$n)
}
mat <- matrix(rep(NA, 6000), ncol=6)
for (i in 1:1000) {
mat[i,] = gen_samp()
}
mat <- data.frame(mat)
colnames(mat) <- c("A", "B", "H", "O", "W", "N")
ggqqplot(mat$B)
hist(mat$B)
mat$total <- apply(mat, 1, sum)
View(mat)
ggqqplot(mat$B, title='race=B')
hist(mat$B, title='race=B')
hist(mat$B) + labs(title='race=B')
hist(mat$B, main='race=B')
ggqqplot(mat$B, title='race=B')
hist(mat$B, main='race=B')
ggqqplot(mat$A, title='race=A')
hist(mat$A, main='race=A')
ggqqplot(mat$H, title='race=H')
hist(mat$H, main='race=H')
ggqqplot(mat$O, title='race=O')
hist(mat$O, main='race=O')
ggqqplot(mat$W, title='race=W')
hist(mat$W, main='race=W')
ggqqplot(mat$N, title='race=N')
hist(mat$N, main='race=N')
obs.val <- dat %>% group_by(race) %>% tally
race <- 'B'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$B / mat$total, mu=mean / sum(obs.val$n))
race <- 'W'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$W / mat$total, mu=mean / sum(obs.val$n))
unique(dat$race)[1:6]
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[1:6],500000, replace=TRUE, prob = c(0.059, 0.601, 0.185, 0.134, 0.028, 0.013)))
gen_pop$shot <- sample(c(0, 1), 500000, replace=TRUE, prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[1:6],500000, replace=TRUE, prob = c(0.059, 0.601, 0.185, 0.134, 0.028, 0.013)))
gen_pop$shot <- sample(c(0, 1), 500000, replace=TRUE, prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- gen_pop %>% group_by(race) %>% tally()
mat <- matrix(rep(NA, 6000), ncol=6)
for (i in 1:1000) {
mat[i,] = gen_samp()
}
gen_pop$n
colnames(mat) <- c("A", "B", "H", "N",  "O", "W")
obs.val <- dat %>% group_by(race) %>% tally
race <- 'B'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$B / mat$total, mu=mean / sum(obs.val$n))
mat <- data.frame(mat)
colnames(mat) <- c("A", "B", "H", "N",  "O", "W")
obs.val <- dat %>% group_by(race) %>% tally
race <- 'B'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$B / mat$total, mu=mean / sum(obs.val$n))
mat$total <- apply(mat, 1, sum)
obs.val <- dat %>% group_by(race) %>% tally
race <- 'B'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$B / mat$total, mu=mean / sum(obs.val$n))
race <- 'W'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$W / mat$total, mu=mean / sum(obs.val$n))
race <- 'A'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$A / mat$total, mu=mean / sum(obs.val$n))
race <- 'H'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$H / mat$total, mu=mean / sum(obs.val$n))
race <- 'N'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$N / mat$total, mu=mean / sum(obs.val$n))
for (i in 2:6) {
print(ggqqplot(by_year[,i], title=paste('Distribution of ', colnames(by_year)[i])))
}
colnames(by_year)[2:6]
colnames(by_year)
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(ggplot2)
required_packages <- c('MASS', 'rcompanion', 'lsr', 'vcd', 'DescTools')
for (p in required_packages) {
if(!require(p,character.only = TRUE)) {
install.packages(p, dep = TRUE)
}
}
library("graphics")
library("gplots")
require(foreign)
require(nnet)
require(reshape2)
library(caret)
library(plyr)
library(Rfast2)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggpubr)
library(ggplot2)
required_packages <- c('MASS', 'rcompanion', 'lsr', 'vcd', 'DescTools')
for (p in required_packages) {
if(!require(p,character.only = TRUE)) {
install.packages(p, dep = TRUE)
}
}
library("graphics")
library("gplots")
require(foreign)
require(nnet)
require(reshape2)
library(caret)
library(plyr)
library(Rfast2)
library(dplyr)
dat<-read.csv("fatal-police-shootings-data.csv")
dat$date <- as.Date(dat$date)
dat <- dat %>% na_if("") %>% na.omit
dat <- dat[dat$date < as.Date('2021-01-01'),]
countState <- table(dat$state)
barplot(countState, main="State Distribution",
xlab="Number of police shootings")
countDate <- table(dat$date)
barplot(countDate, main="Date Distribution",
xlab="Number of police shootings")
countAge <- table(dat$age)
barplot(countAge, main="Age Distribution",
xlab="Number of police shootings")
countArmed <- table(dat$armed)
barplot(countArmed, main="Armed Distribution",
xlab="Number of police shootings")
gun<-("gun")
unarmed<-("unarmed")
dat$group <- with(dat, ifelse(armed %in% gun, "gun",
ifelse(armed %in% unarmed, "unarmed",
ifelse(armed %in% ("undetermined"),
"undetermined", "other" ))))
countArmed.grouped <- table(dat$group)
barplot(countArmed.grouped, main="Armed Distribution (Modified)",
xlab="Number of police shootings")
countRace <- table(dat$race)
barplot(countRace, main="Race Distribution",
xlab="Number of police shootings")
ggplot(dat, aes(x=date, color=race)) + geom_freqpoly(binwidth=50) +
labs(title="Shootings Over Time by Race")
by_year <- data.frame(year=2015:2020)
by_year$A <- (dat[dat$race == "A",] %>% mutate(year=format(date, "%Y")) %>%
group_by(year) %>% tally())$n
by_year$B <- (dat[dat$race == "B",] %>% mutate(year=format(date, "%Y")) %>%
group_by(year) %>% tally())$n
by_year$W <- (dat[dat$race == "W",] %>% mutate(year=format(date, "%Y")) %>%
group_by(year) %>% tally())$n
by_year$H <- (dat[dat$race == "H",] %>% mutate(year=format(date, "%Y")) %>%
group_by(year) %>% tally())$n
by_year$N <- (dat[dat$race == "N",] %>% mutate(year=format(date, "%Y")) %>%
group_by(year) %>% tally())$n
by_year$total <- apply(by_year[,2:6], 1, sum)
by_year
by_long <- by_year %>%
gather(race, total, -year)
ggplot(data=by_long, aes(x=year, y=total, color=race)) + geom_line()
for (i in 2:6) {
print(ggqqplot(by_year[,i], title=paste('Distribution of ', colnames(by_year)[i])))
}
t.test(by_year$W - by_year$B)
t.test(by_year$total - by_year$W)
t.test(by_year$B - by_year$H)
illness <- dat %>% mutate(year=format(date, "%Y")) %>%
group_by(year, signs_of_mental_illness) %>% tally()
t.test(data=illness, n ~ signs_of_mental_illness)
props <- data.frame(year=2015:2020,
n=illness[illness$signs_of_mental_illness == "True", 3])
illness$year <- as.integer(illness$year)
tot.pop <- aggregate(x = illness$n, by=list(illness$year), FUN=sum)
colnames(tot.pop) <- c("year", "n")
tot.pop$prop <- props$n / tot.pop$n
tot.pop
t.test(tot.pop$prop, mu=0.206)
set.seed(1234)
gen_samp <- function() {
gen_pop <- data.frame(id=1:5000, race=sample(unique(dat$race)[1:6],500000,
replace=TRUE,
prob = c(0.059, 0.601, 0.185,
0.134, 0.028, 0.013)))
gen_pop$shot <- sample(c(0, 1), 500000, replace=TRUE,
prob = c(314/315, 1/315))
gen_pop <- gen_pop[gen_pop$shot == 1,]
gen_pop <- gen_pop %>% group_by(race) %>% tally()
return (gen_pop$n)
}
mat <- matrix(rep(NA, 6000), ncol=6)
for (i in 1:1000) {
mat[i,] = gen_samp()
}
mat <- data.frame(mat)
colnames(mat) <- c("A", "B", "H", "N",  "O", "W")
ggqqplot(mat$B, title='race=B')
hist(mat$B, main='race=B')
ggqqplot(mat$A, title='race=A')
hist(mat$A, main='race=A')
ggqqplot(mat$H, title='race=H')
hist(mat$H, main='race=H')
ggqqplot(mat$O, title='race=O')
hist(mat$O, main='race=O')
ggqqplot(mat$W, title='race=W')
hist(mat$W, main='race=W')
ggqqplot(mat$N, title='race=N')
hist(mat$N, main='race=N')
mat$total <- apply(mat, 1, sum)
obs.val <- dat %>% group_by(race) %>% tally
race <- 'B'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$B / mat$total, mu=mean / sum(obs.val$n))
obs.val <- dat %>% group_by(race) %>% tally()
race <- 'B'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$B / mat$total, mu=mean / sum(obs.val$n))
race <- 'W'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$W / mat$total, mu=mean / sum(obs.val$n))
race <- 'A'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$A / mat$total, mu=mean / sum(obs.val$n))
race <- 'H'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$H / mat$total, mu=mean / sum(obs.val$n))
race <- 'N'
mean <- as.integer(obs.val[obs.val$race == race,2])
t.test(mat$N / mat$total, mu=mean / sum(obs.val$n))
gender_mental <- table(dat$gender, dat$signs_of_mental_illness)
gender_mental
balloonplot(t(gender_mental), main ="gender and mental illness", xlab ="",
ylab="", label = FALSE, show.margins = FALSE)
chisq.test(dat$gender, dat$signs_of_mental_illness)
gender_race<-table( dat$race,dat$gender)
gender_race
balloonplot(t(gender_race), main ="gender and race", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
fisher.test(gender_race, simulate.p.value=TRUE)
under_18<-(0:17)
a18_29<-(18:29)
a30_44<-(30:44)
a45_59<-(45:59)
a60_100<-(60:100)
dat$ageGroup <- with(dat, ifelse(age %in% under_18, "under 18",
ifelse(age %in% a18_29, "18-29",
ifelse(age %in% a30_44, "30-44",
ifelse(age %in% a45_59, "45-59",
"60 and older" )))))
gender_age<-table( dat$ageGroup,dat$gender)
gender_age
balloonplot(t(gender_age), main ="gender and age", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
fisher.test(gender_age, simulate.p.value=TRUE)
race_mental<-table( dat$race,dat$signs_of_mental_illness)
race_mental
balloonplot(t(race_mental), main ="race and signs of mental illness", xlab ="",
ylab="", label = FALSE, show.margins = FALSE)
fisher.test(race_mental, simulate.p.value=TRUE)
race_age<-table( dat$race,dat$ageGroup)
race_age
balloonplot(t(race_age), main ="race and age", xlab ="", ylab="",
label = FALSE, show.margins = FALSE)
fisher.test(race_age, simulate.p.value=TRUE)
west<-c('WA','OR','CA', 'MT', 'ID', 'WY', 'NV', 'UT', 'CO', 'AZ', 'NM', 'AK',
'HI')
dat$side <- with(dat, ifelse(state %in% west, "west", "east" ))
with(dat, table(dat$side, dat$race))
race_side<-table(dat$side, dat$race)
fisher.test(race_side, simulate.p.value=TRUE)
with(dat, table(dat$body_camera, dat$race))
race_camera<-table(dat$body_camera, dat$race)
fisher.test(race_camera, simulate.p.value=TRUE)
#Race and other factors
dat_model<-with(dat, data.frame(race, gender, signs_of_mental_illness,
body_camera, side))
index <- createDataPartition(dat_model$race, p = .70, list = FALSE)
train <- dat_model[index,]
test <- dat_model[-index,]
train <- within(train, race <- as.factor(race))
train <- within(train, race <- relevel(race, ref = "W"))
#Training
multinom_model <- multinom(race ~ ., data = dat_model)
summary(multinom_model)
#exponent of the coefficients from our model to see these risk ratios.
exp(coef(multinom_model))
#predicted probabilities for each of our outcome levels
head(round(fitted(multinom_model), 2))
#Validating
train$RacePredicted <- predict(multinom_model, newdata = train, "class")
train <- within(train, RacePredicted <- as.factor(RacePredicted))
train <- within(train, RacePredicted <- relevel(RacePredicted, ref = "W"))
# Building classification table
tab <- table(train$race, train$RacePredicted)
# Calculating accuracy - sum of diagonal elements divided by total obs
round((sum(diag(tab))/sum(tab))*100,2)
#Predicting
test$RacePredicted <- predict(multinom_model, newdata = test, "class")
# Building classification table
tab1 <- table(test$Race, test$RacePredicted)
tab1
